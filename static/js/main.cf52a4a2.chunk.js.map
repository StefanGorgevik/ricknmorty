{"version":3,"sources":["reducers/CharReducer.js","context/ThemeContext.js","context/GlobalState.js","components/Form/Form.js","components/SelectPage/SelectPage.js","components/Header/Header.js","components/Character/Character.js","components/Characters/Characters.js","modal/Background.js","App.js","serviceWorker.js","index.js"],"names":["CharReducer","state","action","type","characters","payload","info","isLoading","page","search","ThemeContext","createContext","themeReducer","isDarkTheme","ThemeContextProvider","children","useReducer","dark","mainBack","color","headerBack","border","characterBack","light","theme","dispatch","isDark","useEffect","localStorage","getItem","setItem","Provider","value","initState","chosenCharacter","GlobalContext","GlobalContextProvider","useContext","ui","fetch","then","response","ok","Error","json","data","results","catch","err","console","log","Form","className","style","onChange","e","target","id","placeholder","SelectPage","handlePageChange","newPage","pages","onClick","Header","background","Character","char","click","backgroundColor","src","image","alt","name","species","status","location","origin","gender","React","memo","map","key","Background","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.cf52a4a2.chunk.js","sourcesContent":["export const GET_CHARACTERS = \"GET_CHARACTERS\";\r\nexport const SET_INFO = \"GET_INFO\";\r\nexport const SET_IS_LOADING = \"SET_IS_LOADING\";\r\nexport const SET_PAGE = \"SET_PAGE\";\r\nexport const SET_SEARCH = \"SET_SEARCH\";\r\n\r\nexport const CharReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case GET_CHARACTERS: {\r\n      return {\r\n        ...state,\r\n        characters: action.payload,\r\n      };\r\n    }\r\n    case SET_INFO: {\r\n      return {\r\n        ...state,\r\n        info: action.payload,\r\n      };\r\n    }\r\n    case SET_IS_LOADING: {\r\n      return {\r\n        ...state,\r\n        isLoading: action.payload,\r\n      };\r\n    }\r\n    case SET_PAGE: {\r\n      return {\r\n        ...state,\r\n        page: action.payload,\r\n      };\r\n    }\r\n    case SET_SEARCH: {\r\n      return {\r\n        ...state,\r\n        search: action.payload,\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n","import React, { createContext, useEffect, useReducer } from \"react\";\r\nexport const ThemeContext = createContext();\r\nconst SET_THEME = \"SET_THEME\";\r\nconst CHANGE_THEME = \"CHANGE_THEME\";\r\nexport const themeReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case SET_THEME: {\r\n      return { ...state, isDarkTheme: !state.isDarkTheme };\r\n    }\r\n    case CHANGE_THEME: {\r\n      return { ...state, isDarkTheme: action.payload };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const ThemeContextProvider = ({ children }) => {\r\n  const [theme, dispatch] = useReducer(themeReducer, {\r\n    isDarkTheme: true,\r\n    dark: {\r\n      mainBack: \"rgba(20, 20, 19, 0.822)\",\r\n      color: \"rgba(177, 174, 174, 0.767)\",\r\n      headerBack: \"rgb(14, 13, 13)\",\r\n      border: \"1px solid white\",\r\n      characterBack: \"rgba(87, 79, 80, 0.342)\",\r\n    },\r\n    light: {\r\n      mainBack: \"rgba(237, 241, 245)\",\r\n      color: \"whitesmoke\",\r\n      headerBack: \"rgb(1, 20, 51)\",\r\n      border: \"1px solid brown\",\r\n      characterBack: \"rgba(8, 42, 97)\",\r\n    },\r\n  });\r\n\r\n  const isDark = theme.isDarkTheme;\r\n\r\n  useEffect(() => {\r\n    const theme = localStorage.getItem(\"theme\");\r\n    if (theme) {\r\n      let isDark = false;\r\n      if (theme === \"dark\") {\r\n        isDark = true;\r\n      }\r\n      dispatch({ type: CHANGE_THEME, payload: isDark });\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    if (isDark) {\r\n      localStorage.setItem(\"theme\", \"dark\");\r\n    } else {\r\n      localStorage.setItem(\"theme\", \"light\");\r\n    }\r\n  }, [isDark]);\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, dispatch }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n","import React, { createContext, useReducer, useEffect, useContext } from \"react\";\r\nimport {\r\n  CharReducer,\r\n  GET_CHARACTERS,\r\n  SET_INFO,\r\n  SET_IS_LOADING,\r\n} from \"../reducers/CharReducer\";\r\nimport { ThemeContext } from \"./ThemeContext\";\r\n\r\nconst initState = {\r\n  characters: [],\r\n  info: [],\r\n  page: 1,\r\n  isLoading: false,\r\n  search: \"\",\r\n  chosenCharacter: \"\",\r\n};\r\n\r\nexport const GlobalContext = createContext(initState);\r\n\r\nexport const GlobalContextProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(CharReducer, initState);\r\n  const { theme } = useContext(ThemeContext);\r\n  let ui = theme.isDarkTheme ? theme.dark : theme.light;\r\n  useEffect(() => {\r\n    dispatch({ type: SET_IS_LOADING, payload: true });\r\n    fetch(`https://rickandmortyapi.com/api/character/?page=${state.page}`)\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch.\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        dispatch({ type: SET_IS_LOADING, payload: false });\r\n        dispatch({ type: GET_CHARACTERS, payload: data.results });\r\n        dispatch({ type: SET_INFO, payload: data.info });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        dispatch({ type: SET_IS_LOADING, payload: false });\r\n      });\r\n  }, [state.page]);\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: SET_IS_LOADING, payload: true });\r\n    fetch(`https://rickandmortyapi.com/api/character/?name=${state.search}`)\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch.\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        dispatch({ type: SET_IS_LOADING, payload: false });\r\n        dispatch({ type: GET_CHARACTERS, payload: data.results });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        dispatch({ type: SET_IS_LOADING, payload: false });\r\n      });\r\n  }, [state.search]);\r\n\r\n  //   const clickedCharacterHandler = (char) => {\r\n  //     window.scrollTo(0, 0);\r\n  //     dispatch({ type: SET_CHOSEN_CHARACTER, payload: char });\r\n  //   };\r\n\r\n  //   const closeCharacterInfo = (e) => {\r\n  //     e.stopPropagation();\r\n  //     dispatch({ type: SET_CHOSEN_CHARACTER, payload: \"\" });\r\n  //   };\r\n\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        state,\r\n        ui,\r\n        dispatch,\r\n        // clickedCharacterHandler,\r\n        // closeCharacterInfo,\r\n        page: state.page,\r\n      }}\r\n    >\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n","import React, {useContext} from 'react'\r\nimport './Form.css'\r\n\r\nimport {GlobalContext} from '../../context/GlobalState'\r\nimport {SET_SEARCH } from '../../reducers/CharReducer'\r\n\r\nconst Form = () => {\r\n    const {dispatch, ui} = useContext(GlobalContext)\r\n    \r\n    return (\r\n        <form className=\"form\">\r\n            <input style={{border: ui.border }} onChange={e => dispatch({type: SET_SEARCH, payload: e.target.value })}\r\n             type='search' id='input' className=\"input\" placeholder=\"Search by name\" />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","import React, { useContext } from \"react\";\r\nimport \"./SelectPage.css\";\r\nimport { GlobalContext } from \"../../context/GlobalState\";\r\nimport { SET_PAGE } from \"../../reducers/CharReducer\";\r\nconst SelectPage = () => {\r\n  const { state, dispatch, page } = useContext(GlobalContext);\r\n  const info = state.info;\r\n  console.log(\"info\", info, page);\r\n\r\n  const handlePageChange = (type) => {\r\n    let newPage;\r\n    if (type === \"prev\" && page > 1) {\r\n      newPage = page - 1;\r\n    } else if (type === \"next\") {\r\n      if (page === info.pages) return;\r\n      newPage = page + 1;\r\n    }\r\n    dispatch({ type: SET_PAGE, payload: newPage });\r\n  };\r\n  return (\r\n    <div className=\"select-page\">\r\n      <div className=\"pagination\">\r\n        <span onClick={() => handlePageChange(\"prev\")}>{\"<\"}</span>\r\n        <span>{page}</span>\r\n        <span onClick={() => handlePageChange(\"next\")}>{\">\"}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectPage;\r\n","import React, { useContext } from 'react'\r\nimport './Header.css'\r\nimport Form from '../Form/Form'\r\nimport SelectPage from '../SelectPage/SelectPage'\r\nimport { GlobalContext } from '../../context/GlobalState'\r\nimport { ThemeContext } from '../../context/ThemeContext'\r\n\r\nconst Header = () => {\r\n  const { ui } = useContext(GlobalContext)\r\n  const { dispatch } = useContext(ThemeContext)\r\n\r\n  return (\r\n    <nav style={{ background: ui.headerBack, color: ui.color }} className=\"main-header\">\r\n      <h1>Rick n' morty</h1>\r\n      <Form />\r\n      <SelectPage />\r\n      <button style={{ border: ui.border }} className=\"theme-btn\" onClick={() => dispatch({ type: \"SET_THEME\" })}>Theme</button>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React, { useContext } from \"react\";\r\nimport \"./Character.css\";\r\nimport { GlobalContext } from \"../../context/GlobalState\";\r\n\r\nconst Character = ({ char, click }) => {\r\n  const { ui } = useContext(GlobalContext);\r\n  return (\r\n    <div\r\n      style={{ backgroundColor: ui.characterBack, color: ui.color }}\r\n      className=\"character\"\r\n      onClick={click}\r\n    >\r\n      <img src={char.image} alt=\"user\" />\r\n      <p className=\"info-p \">{char.name}</p>\r\n      <div\r\n        className=\"main-info\"\r\n        style={{ background: ui.headerBack, color: ui.color }}\r\n      >\r\n        <p className=\"char-info-p\">\r\n          <span>Species:</span>\r\n          <span>{char.species}</span>\r\n        </p>\r\n        <p className=\"char-info-p\">\r\n          <span>Status:</span> <span>{char.status}</span>\r\n        </p>\r\n        <p className=\"char-info-p\">\r\n          <span> Location:</span> <span>{char.location.name}</span>\r\n        </p>\r\n        <p className=\"char-info-p\">\r\n          <span> Origin:</span> <span>{char.origin.name}</span>\r\n        </p>\r\n        <p className=\"char-info-p\">\r\n          <span> Gender:</span> <span>{char.gender}</span>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Character;\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext } from \"../../context/GlobalState\";\r\nimport \"./Characters.css\";\r\n\r\nimport Character from \"../Character/Character\";\r\n\r\nconst Characters = () => {\r\n  const { state } = useContext(GlobalContext);\r\n  if (state.isLoading)\r\n    return (\r\n      <div className=\"loader-wrapper\">\r\n        <div className=\"lds-hourglass\"></div>\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <div className=\"chars-content\">\r\n      {state.characters &&\r\n        state.info &&\r\n        state.characters.map((char) => (\r\n          <Character key={char.id} id={char.id} char={char} />\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Characters);\r\n","import React, {useContext} from 'react'\r\nimport './../App.css'\r\n\r\nimport {ThemeContext} from '../context/ThemeContext'\r\n\r\nconst Background = ({children}) => {\r\n    const {theme} = useContext(ThemeContext)\r\n    let ui = theme.isDarkTheme ? theme.dark : theme.light\r\n    return (\r\n        <div style={{backgroundColor: ui.mainBack, color: ui.color}} className=\"background\">\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Background\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header/Header'\r\nimport Characters from './components/Characters/Characters'\r\n\r\nimport { GlobalContextProvider } from './context/GlobalState'\r\nimport { ThemeContextProvider } from './context/ThemeContext';\r\nimport Background from './modal/Background';\r\nfunction App() {\r\n\r\n\r\n  return (\r\n    <ThemeContextProvider>\r\n      <GlobalContextProvider>\r\n        <Background>\r\n          <div className=\"App\" >\r\n            <Header />\r\n            <Characters />\r\n          </div>\r\n        </Background>\r\n      </GlobalContextProvider>\r\n    </ThemeContextProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}