{"version":3,"sources":["reducers/CharReducer.js","context/ThemeContext.js","context/GlobalState.js","components/Form/Form.js","components/SelectPage/SelectPage.js","components/Header/Header.js","components/CharacterInfo/CharacterInfo.js","components/Character/Character.js","components/Characters/Characters.js","modal/Background.js","App.js","serviceWorker.js","index.js"],"names":["CharReducer","state","action","type","characters","payload","info","isLoading","chars","filter","ch","id","unshift","chosenCharacter","page","search","ThemeContext","createContext","themeReducer","isDarkTheme","ThemeContextProvider","children","useReducer","dark","mainBack","color","headerBack","border","characterBack","light","theme","dispatch","Provider","value","initState","GlobalContext","GlobalContextProvider","useContext","ui","useEffect","fetch","then","response","ok","Error","json","data","results","catch","err","console","log","clickedCharacterHandler","char","window","scrollTo","closeCharacterInfo","e","stopPropagation","Form","className","style","onChange","target","placeholder","SelectPage","pages","i","push","key","htmlFor","Header","background","onClick","CharacterInfo","species","status","location","name","origin","gender","Character","click","backgroundColor","src","image","alt","React","memo","content","map","Background","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.91f66f07.chunk.js","sourcesContent":["export const GET_CHARACTERS = \"GET_CHARACTERS\"\r\nexport const SET_INFO = \"GET_INFO\"\r\nexport const SET_IS_LOADING = \"SET_IS_LOADING\"\r\nexport const SET_CHOSEN_CHARACTER = \"SET_CHOSEN_CHARACTER\"\r\nexport const SET_PAGE = \"SET_PAGE\"\r\nexport const SET_SEARCH = \"SET_SEARCH\"\r\n\r\nexport const CharReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case GET_CHARACTERS: {\r\n            return {\r\n                ...state, characters: action.payload\r\n            }\r\n        }\r\n        case SET_INFO: {\r\n            return {\r\n                ...state, info: action.payload\r\n            }\r\n        }\r\n        case SET_IS_LOADING: {\r\n            return {\r\n                ...state, isLoading: action.payload\r\n            }\r\n        }\r\n        case SET_CHOSEN_CHARACTER: {\r\n            let chars = []\r\n            if (action.payload !== '') {\r\n                chars = state.characters.filter(ch => ch.id !== action.payload.id)\r\n                chars.unshift(action.payload)\r\n            } else {\r\n                chars = state.characters\r\n            }\r\n            return {\r\n                ...state, chosenCharacter: action.payload, characters: chars\r\n            }\r\n        }\r\n        case SET_PAGE: {\r\n            return {\r\n                ...state, page: action.payload\r\n            }\r\n        }\r\n        case SET_SEARCH: {\r\n            return {\r\n                ...state, search: action.payload\r\n            }\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}","import React, { createContext, useReducer } from 'react'\r\nexport const ThemeContext = createContext()\r\n\r\nexport const themeReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"SET_THEME\": {\r\n            return { ...state, isDarkTheme: !state.isDarkTheme };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const ThemeContextProvider = ({ children }) => {\r\n    const [theme, dispatch] = useReducer(themeReducer, {\r\n        isDarkTheme: false,\r\n        dark: {\r\n            mainBack: \"rgba(20, 20, 19, 0.822)\",\r\n            color: \"rgba(177, 174, 174, 0.767)\",\r\n            headerBack: \"rgb(14, 13, 13)\",\r\n            border: '1px solid white',\r\n            characterBack: 'rgba(87, 79, 80, 0.342)'\r\n        },\r\n        light: {\r\n            mainBack: \"rgba(237, 241, 245)\",\r\n            color: \"whitesmoke\",\r\n            headerBack: \"rgb(1, 20, 51)\",\r\n            border: '1px solid brown',\r\n            characterBack: 'rgba(8, 42, 97)'\r\n        }\r\n    })\r\n\r\n    return (\r\n        <ThemeContext.Provider value={{ theme, dispatch }}>\r\n            {children}\r\n        </ThemeContext.Provider>\r\n    )\r\n}","import React, { createContext, useReducer, useEffect, useContext } from 'react'\r\nimport { CharReducer, GET_CHARACTERS, SET_INFO, SET_IS_LOADING, SET_CHOSEN_CHARACTER } from '../reducers/CharReducer'\r\nimport {ThemeContext} from './ThemeContext'\r\n\r\nconst initState = {\r\n    characters: [],\r\n    info: [],\r\n    page: 1,\r\n    isLoading: false,\r\n    search: '',\r\n    chosenCharacter: '',\r\n}\r\n\r\nexport const GlobalContext = createContext(initState)\r\n\r\nexport const GlobalContextProvider = ({ children }) => {\r\n    const [state, dispatch] = useReducer(CharReducer, initState)\r\n    const {theme} = useContext(ThemeContext)\r\n    let ui = theme.isDarkTheme ? theme.dark : theme.light\r\n    useEffect(() => {\r\n        dispatch({ type: SET_IS_LOADING, payload: true })\r\n        fetch(`https://rickandmortyapi.com/api/character/?page=${state.page}`)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch.');\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                dispatch({ type: SET_IS_LOADING, payload: false })\r\n                dispatch({ type: GET_CHARACTERS, payload: data.results })\r\n                dispatch({ type: SET_INFO, payload: data.info })\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                dispatch({ type: SET_IS_LOADING, payload: false })\r\n            });\r\n    }, [state.page])\r\n\r\n\r\n    useEffect(() => {\r\n        console.log('second use effect')\r\n        dispatch({ type: SET_IS_LOADING, payload: true })\r\n        fetch(`https://rickandmortyapi.com/api/character/?name=${state.search}`)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch.');\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                dispatch({ type: SET_IS_LOADING, payload: false })\r\n                dispatch({ type: GET_CHARACTERS, payload: data.results })\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                dispatch({ type: SET_IS_LOADING, payload: false })\r\n            });\r\n}, [state.search])\r\n\r\n    const clickedCharacterHandler = (char) => {\r\n        console.log(char)\r\n        window.scrollTo(0, 0)\r\n        dispatch({ type: SET_CHOSEN_CHARACTER, payload: char })\r\n\r\n    }\r\n\r\n    const closeCharacterInfo = (e) => {\r\n        e.stopPropagation()\r\n        dispatch({ type: SET_CHOSEN_CHARACTER, payload: '' })\r\n    }\r\n\r\n\r\n    return (\r\n        <GlobalContext.Provider value={{\r\n            state, ui, dispatch, clickedCharacterHandler, closeCharacterInfo\r\n        }}>\r\n            {children}\r\n        </GlobalContext.Provider>\r\n    )\r\n}","import React, {useContext} from 'react'\r\nimport './Form.css'\r\n\r\nimport {GlobalContext} from '../../context/GlobalState'\r\nimport {SET_SEARCH } from '../../reducers/CharReducer'\r\n\r\nconst Form = () => {\r\n    const {dispatch, ui} = useContext(GlobalContext)\r\n    \r\n    return (\r\n        <form className=\"form\">\r\n            <input style={{border: ui.border }} onChange={e => dispatch({type: SET_SEARCH, payload: e.target.value })}\r\n             type='search' id='input' className=\"input\" placeholder=\"Search by name\" />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","import React, {useContext} from 'react'\r\nimport './SelectPage.css'\r\nimport { GlobalContext } from '../../context/GlobalState'\r\nimport {SET_PAGE} from '../../reducers/CharReducer'\r\nconst SelectPage = () => {\r\n    const { ui, state, dispatch } = useContext(GlobalContext)\r\n    const info = state.info\r\n  let pages = []\r\n\r\n  if (info) {\r\n    for (let i = 1; i <= info.pages; i++) {\r\n        pages.push(<option className=\"option-page\" key={'page' + i} value={i}> {i}</option>)\r\n    }\r\n}\r\n    return (\r\n        <div className='select-page'>\r\n        <label htmlFor=\"select\">Page</label>\r\n        <select style={{border: ui.border}} id=\"select\" className=\"pages-select\" onChange={(e) =>dispatch( {type: SET_PAGE, payload: e.target.value})}>\r\n                {pages}\r\n            </select>\r\n    </div>)\r\n}\r\n\r\nexport default SelectPage\r\n","import React, {useContext} from 'react'\r\nimport './Header.css'\r\nimport Form from '../Form/Form'\r\nimport SelectPage from '../SelectPage/SelectPage'\r\nimport {GlobalContext} from '../../context/GlobalState'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\n\r\nconst Header = () => {\r\n    const {ui} = useContext(GlobalContext)\r\n    const {dispatch} = useContext(ThemeContext)\r\n    \r\n    return (\r\n        <nav  style={{background: ui.headerBack, color: ui.color}} className=\"main-header\">\r\n          <h1>Rick n' morty</h1>  \r\n          <Form />\r\n          <SelectPage/>\r\n          <button style={{border: ui.border}} className=\"theme-btn\" onClick={() => dispatch({type: \"SET_THEME\"})}>Theme</button>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useContext } from 'react'\r\nimport './CharacterInfo.css'\r\nimport { GlobalContext } from '../../context/GlobalState'\r\n\r\nconst CharacterInfo = () => {\r\n    const { state, closeCharacterInfo } = useContext(GlobalContext)\r\n    const chosenCharacter = state.chosenCharacter\r\n    return (\r\n        <div className=\"char-info-div\">\r\n            <div className=\"x-div\">\r\n                <p onClick={closeCharacterInfo} className=\"x-p\">\r\n                    <span className=\"x-span\">x</span>\r\n                </p>\r\n            </div>\r\n            <div className=\"main-info\">\r\n                <p className=\"char-info-p\">Species: <span>{chosenCharacter.species}</span></p>\r\n                <p className=\"char-info-p\">Status: <span>{chosenCharacter.status}</span></p>\r\n                <p className=\"char-info-p\">Location: <span>{chosenCharacter.location.name}</span></p>\r\n                <p className=\"char-info-p\">Origin: <span>{chosenCharacter.origin.name}</span></p>\r\n                <p className=\"char-info-p\">Gender: <span>{chosenCharacter.gender}</span></p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharacterInfo\r\n","import React, { useContext } from 'react'\r\nimport './Character.css'\r\nimport CharacterInfo from '../CharacterInfo/CharacterInfo'\r\nimport { GlobalContext } from '../../context/GlobalState'\r\n\r\nconst Character = ({ char, click }) => {\r\n    const { state, ui } = useContext(GlobalContext)\r\n    const chosenCharacter = state.chosenCharacter\r\n    return (\r\n        <div style={{backgroundColor: ui.characterBack, color: ui.color}} className={char.id !== chosenCharacter.id ? \"character\" : \"selected-char\"} onClick={click}>\r\n            <div className={char.id === chosenCharacter.id ? \"left-side\" : \"\"}>\r\n                <img src={char.image} alt=\"user\" />\r\n                <p className='info-p '>{char.name}</p>\r\n            </div>\r\n            {char.id === chosenCharacter.id ?\r\n                <div className=\"right-side\">\r\n                    <CharacterInfo />\r\n                </div> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Character\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../../context/GlobalState'\r\nimport './Characters.css'\r\n\r\nimport Character from '../Character/Character'\r\n\r\nconst Characters = () => {\r\n    console.log('characters')\r\n    const { state, clickedCharacterHandler } = useContext(GlobalContext)\r\n    let content = <p>Loading...</p>\r\n\r\n    if (!state.isLoading && state.characters && state.info) {\r\n        content = state.characters.map(char => {\r\n            return <Character\r\n                click={() => clickedCharacterHandler(char)}\r\n                key={char.id}\r\n                id={char.id}\r\n                char={char} />\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"characters\">\r\n            <div className=\"chars-content\">\r\n                {content}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(Characters)\r\n","import React, {useContext} from 'react'\r\nimport './../App.css'\r\n\r\nimport {ThemeContext} from '../context/ThemeContext'\r\n\r\nconst Background = ({children}) => {\r\n    const {theme} = useContext(ThemeContext)\r\n    let ui = theme.isDarkTheme ? theme.dark : theme.light\r\n    return (\r\n        <div style={{backgroundColor: ui.mainBack, color: ui.color}} className=\"background\">\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Background\r\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header/Header'\nimport Characters from './components/Characters/Characters'\n\nimport { GlobalContextProvider } from './context/GlobalState'\nimport { ThemeContextProvider } from './context/ThemeContext';\nimport Background from './modal/Background';\nfunction App() {\n\n\n  return (\n    <ThemeContextProvider>\n      <GlobalContextProvider>\n        <Background>\n          <div className=\"App\" >\n            <Header />\n            <Characters />\n          </div>\n        </Background>\n      </GlobalContextProvider>\n    </ThemeContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}