{"version":3,"sources":["context/GlobalState.js","components/Form/Form.js","components/SelectPage/SelectPage.js","components/Header/Header.js","components/CharacterInfo/CharacterInfo.js","components/Character/Character.js","components/Characters/Characters.js","App.js","serviceWorker.js","index.js"],"names":["GlobalContext","createContext","characters","GlobalContextProvider","children","useState","setCharacters","info","setInfo","page","setPage","search","setSearch","isLoading","setIsLoading","chosenCharacter","setChosenCharacter","useEffect","fetch","then","response","ok","Error","json","data","results","catch","err","console","log","Provider","value","clickedCharacterHandler","char","window","scrollTo","chars","filter","ch","id","unshift","closeCharacterInfo","e","stopPropagation","setPageHandler","getCharacterByName","preventDefault","Form","useContext","onSubmit","className","onChange","target","type","placeholder","onClick","SelectPage","pages","i","push","key","htmlFor","Header","CharacterInfo","species","status","origin","name","gender","Character","click","src","image","alt","React","memo","content","map","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.4e2accf7.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from 'react'\r\n// import {CharReducer, GET_CHARACTERS} from '../reducers/CharReducer'\r\n\r\nconst initState = {\r\n    characters: []\r\n}\r\n\r\nexport const GlobalContext = createContext(initState)\r\n\r\nexport const GlobalContextProvider = ({ children }) => {\r\n    const [characters, setCharacters] = useState(null);\r\n    const [info, setInfo] = useState(null);\r\n    const [page, setPage] = useState(1);\r\n    const [search, setSearch] = useState('1');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const [chosenCharacter, setChosenCharacter] = useState('');\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        fetch(`https://rickandmortyapi.com/api/character/?page=${page}`)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch.');\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                setIsLoading(false);\r\n                setCharacters(data.results)\r\n                setInfo(data.info)\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                setIsLoading(false);\r\n            });\r\n    }, [page])\r\n\r\n\r\n    const getCharacterByName = (e) => {\r\n        e.preventDefault()\r\n        setIsLoading(true);\r\n        fetch(`https://rickandmortyapi.com/api/character/?name=${search}`)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch.');\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                setIsLoading(false);\r\n                setCharacters(data.results)\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                setIsLoading(false);\r\n            });\r\n    }\r\n\r\n    const setPageHandler = (page) => {\r\n        console.log(page)\r\n        setPage(page)\r\n    }\r\n\r\n    const clickedCharacterHandler = (char) => {\r\n        setChosenCharacter(char)\r\n        window.scrollTo(0, 0)\r\n        const chars = characters.filter(ch => ch.id !== char.id)\r\n        chars.unshift(char)\r\n        setCharacters(chars)\r\n    }\r\n    const closeCharacterInfo = (e) => {\r\n        e.stopPropagation()\r\n        setChosenCharacter('')\r\n    }\r\n\r\n    return (\r\n        <GlobalContext.Provider value={{\r\n            characters,\r\n            info,\r\n            chosenCharacter,\r\n            isLoading,\r\n            page,\r\n            clickedCharacterHandler,\r\n            closeCharacterInfo,\r\n            setPageHandler,\r\n            setSearch,\r\n            getCharacterByName\r\n        }}>\r\n            {children}\r\n        </GlobalContext.Provider>\r\n    )\r\n}","import React, {useContext} from 'react'\r\nimport './Form.css'\r\n\r\nimport {GlobalContext} from '../../context/GlobalState'\r\n\r\nconst Form = () => {\r\n    const {setSearch, getCharacterByName} = useContext(GlobalContext)\r\n    return (\r\n        <form onSubmit={getCharacterByName} className=\"form\">\r\n            <input onChange={e => setSearch(e.target.value)}\r\n             type='text' id='input' className=\"input\" placeholder=\"Search by name\" />\r\n            <button className=\"form-btn\" onClick={getCharacterByName}>Search</button>\r\n            <button className=\"form-btn\" onClick={() => setSearch('')}>Clear</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","import React, {useContext} from 'react'\r\nimport './SelectPage.css'\r\nimport { GlobalContext } from '../../context/GlobalState'\r\n\r\nconst SelectPage = () => {\r\n    const { info, setPageHandler } = useContext(GlobalContext)\r\n  let pages = []\r\n\r\n  if (info) {\r\n    for (let i = 1; i <= info.pages; i++) {\r\n        pages.push(<option className=\"option-page\" key={'page' + i} value={i}> {i}</option>)\r\n    }\r\n}\r\n    return (\r\n        <div className='select-page'>\r\n        <label htmlFor=\"select\">Page</label>\r\n        <select id=\"select\" className=\"pages-select\" onChange={(e) =>setPageHandler(e.target.value)}>\r\n                {pages}\r\n            </select>\r\n    </div>)\r\n}\r\n\r\nexport default SelectPage\r\n","import React from 'react'\r\nimport './Header.css'\r\nimport Form from '../Form/Form'\r\nimport SelectPage from '../SelectPage/SelectPage'\r\n\r\nconst Header = () => {\r\n  \r\n    return (\r\n        <nav className=\"main-header\">\r\n          <h1>Rick and morty</h1>  \r\n          <Form />\r\n          <SelectPage/>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useContext } from 'react'\r\nimport './CharacterInfo.css'\r\nimport { GlobalContext } from '../../context/GlobalState'\r\n\r\nconst CharacterInfo = () => {\r\n    const { chosenCharacter, closeCharacterInfo } = useContext(GlobalContext)\r\n    console.log(chosenCharacter)\r\n    return (\r\n        <div className=\"char-info-div\">\r\n            <div className=\"x-div\">\r\n                <p onClick={closeCharacterInfo} className=\"x-p\">x</p>\r\n            </div>\r\n            <div className=\"main-info\">\r\n                <p>Species: <span>{chosenCharacter.species}</span></p>\r\n                <p>Status: <span>{chosenCharacter.status}</span></p>\r\n                <p>Origin: <span>{chosenCharacter.origin.name}</span></p>\r\n                <p>Gender: <span>{chosenCharacter.gender}</span></p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharacterInfo\r\n","import React, { useContext } from 'react'\r\nimport './Character.css'\r\nimport CharacterInfo from '../CharacterInfo/CharacterInfo'\r\nimport { GlobalContext } from '../../context/GlobalState'\r\n\r\nconst Character = ({ char, click }) => {\r\n    const { chosenCharacter } = useContext(GlobalContext)\r\n    return (\r\n        <div className={char.id !== chosenCharacter.id ? \"character\" : \"selected-char\"} onClick={click}>\r\n            <div className={char.id === chosenCharacter.id ? \"left-side\" : \"char-inactive\"}>\r\n                <img src={char.image} alt=\"user\" />\r\n                <div className=\"info\">\r\n                    <p>{char.name}</p>\r\n                </div>\r\n            </div>\r\n            {char.id === chosenCharacter.id ?\r\n                <div className=\"right-side\">\r\n                    <CharacterInfo />\r\n                </div> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Character\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../../context/GlobalState'\r\nimport './Characters.css'\r\n\r\n\r\nimport Character from '../Character/Character'\r\n\r\nconst Characters = () => {\r\n    console.log('characters')\r\n    const { characters, info, clickedCharacterHandler, isLoading } = useContext(GlobalContext)\r\n\r\n    let content = <p>Loading...</p>\r\n\r\n\r\n    if (!isLoading && characters && info) {\r\n        content = characters.map(char => {\r\n            return <Character\r\n                click={() => clickedCharacterHandler(char)}\r\n                key={char.id}\r\n                id={char.id}\r\n                char={char} />\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"characters\">\r\n            <div className=\"chars-content\">\r\n                {content}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(Characters)\r\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header/Header'\nimport Characters from './components/Characters/Characters'\n\nimport { GlobalContextProvider } from './context/GlobalState'\nfunction App() {\n  return (\n    <GlobalContextProvider>\n      <div className=\"App\">\n        <Header />\n        <Characters />\n      </div>\n    </GlobalContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}